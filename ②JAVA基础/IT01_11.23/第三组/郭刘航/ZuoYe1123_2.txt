2 总结下抽象类与接口有什么区别？

  在语法层面，Java语言对于abstract class和interface给出了不同的定义方式，
  下面以定义一个名为Demo的抽象类为例来说明这种不同。
  使用abstract class的方式定义Demo抽象类的方式如下：

  java 代码
  abstract class Demo ｛      
  abstract void method1();      
  abstract void method2();  
  …     
  ｝   
  使用interface的方式定义Demo抽象类的方式如下： 

  interface Demo {      
  void method1();      
  void method2(); 
  …      
  }    
  在abstract class方式中，Demo可以有自己的数据成员，也可以有非abstarct的成员方法

  而在interface方式的实现中，Demo只能够有静态的不能被修改的数据成员
 （也就是必须是static final的，不过在interface中一般不定义数据成员），
  所有的成员方法都是abstract的。从某种意义上说，interface是一种特殊形
  式的abstract class。

  从编程的角度来看，abstract class和interface都可以用来实现"design by 
  contract"的思想。但是在具体的使用上面还是有一些区别的。

  首先，abstract class在Java语言中表示的是一种继承关系，一个类只能使用
  一次继承关系。但是，一个类却可以实现多个interface。也许，这是Java语言
  的设计者在考虑Java对于多重继承的支持方面的一种折中考虑吧